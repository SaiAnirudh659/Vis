# -*- coding: utf-8 -*-
"""ps2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ne6GF638OoJn1irCngY9qVJlf32QCva_

**Step 1: Research Questions & Hypotheses -> ✅ Done (PDF Generated)**

**Step - 2 : Data Preprocessing and Merging ->  ✅ Done (As Code)**

**Step 3 -> Exploratory Data Analysis (EDA) -> ✅ Done**

**Step 3 -> Data Visualization -> ✅ Done (All Graphs Included)**

**Step 4 -> Statistical Modeling - Regression Analysis -> ✅ Done (Analyzing & Modeling)**

**And also Included a brief on ->**
*   Research Study: Impact of Air Pollution and Temperature Anomalies on GD

---

**Step 1: Define Research Questions and Hypotheses**

-> Attached a PDF File

**Step - 1 : Data Preprocessing and Merging**

Step 1.1 -> Install Required Libraries
"""

import pandas as pd

"""Step 1.2 -> Load the Datasets"""

# Load datasets
nasa_temp_df = pd.read_csv('/content/NASA_Temperature_Anomalies_Cleaned.csv')
who_pollution_df = pd.read_excel('/content/WHO_Air_Pollution_Data.xlsx')
world_bank_gdp_df = pd.read_csv('/content/World_Bank_GDP_Cleaned.csv')

"""Step 1.3 -> Data Cleaning and Preprocessing"""

# Rename columns for clarity and consistency
nasa_temp_df.rename(columns={'Year': 'Year', 'Temperature_Anomaly': 'Temp_Anomaly'}, inplace=True)
who_pollution_df.rename(columns={'DIM_GEO_NAME': 'Country', 'DIM_TIME_YEAR': 'Year', 'VALUE_NUMERIC': 'Air_Pollution_Index'}, inplace=True)
world_bank_gdp_df.rename(columns={'Country Name': 'Country'}, inplace=True)

# Transform World Bank GDP dataset from wide to long format
gdp_long_df = world_bank_gdp_df.melt(id_vars=['Country', 'Country Code'], var_name='Year', value_name='GDP')
gdp_long_df['Year'] = gdp_long_df['Year'].astype(int)  # Convert Year to integer

# Drop unnecessary columns in WHO dataset
who_pollution_df = who_pollution_df[['Country', 'Year', 'Air_Pollution_Index']]

# Drop unnecessary columns in GDP dataset
gdp_long_df = gdp_long_df[['Country', 'Year', 'GDP']]

"""Step 1.4 -> Merging the Datasets"""

# Merge WHO Air Pollution Data with World Bank GDP Data on 'Country' and 'Year'
merged_country_data = pd.merge(who_pollution_df, gdp_long_df, on=['Country', 'Year'], how='inner')

# Merge the global NASA temperature anomaly data using 'Year' as the key
final_merged_df = pd.merge(merged_country_data, nasa_temp_df, on='Year', how='left')

# Display the final merged dataset
print(final_merged_df.head())  # Shows first few rows

"""Now that the data is merged, we can proceed with Data analysis such as:  
-> Summary statistics  
-> Correlation analysis  
-> Data visualization

**Step 2 -> Exploratory Data Analysis (EDA)**

2.1 : Summary Statistics
"""

# Display basic statistics of the dataset
print(final_merged_df.describe())

"""2.2 : Check for Missing Values"""

# Check for missing values in the dataset
print(final_merged_df.isnull().sum())

"""2.3 : Correlation Analysis"""

# Calculate correlation between variables
correlation_matrix = final_merged_df[['Air_Pollution_Index', 'GDP', 'Temp_Anomaly']].corr()
print(correlation_matrix)

"""**Step 3 -> Data Visualization**

We need to install **Matplotlib** and **Seaborn**
"""

import matplotlib.pyplot as plt
import seaborn as sns

"""3.1 : Scatter Plot: Air Pollution vs GDP"""

plt.figure(figsize=(10, 6))
sns.scatterplot(x=final_merged_df['Air_Pollution_Index'], y=final_merged_df['GDP'])
plt.xlabel('Air Pollution Index')
plt.ylabel('GDP')
plt.title('Relationship between Air Pollution and GDP')
plt.show()

"""3.2 : Scatter Plot: Temperature Anomalies vs GDP"""

plt.figure(figsize=(10, 6))
sns.scatterplot(x=final_merged_df['Temp_Anomaly'], y=final_merged_df['GDP'])
plt.xlabel('Temperature Anomaly')
plt.ylabel('GDP')
plt.title('Impact of Temperature Anomalies on GDP')
plt.show()

"""3.3 : Line Plot : Global Temperature Anomalies Over Time"""

plt.figure(figsize=(12, 6))
sns.lineplot(x=final_merged_df['Year'], y=final_merged_df['Temp_Anomaly'], marker='o')
plt.xlabel('Year')
plt.ylabel('Temperature Anomaly')
plt.title('Global Temperature Anomalies Over Time')
plt.show()

"""3.4 : Heatmap of Correlation Matrix"""

plt.figure(figsize=(8,6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Heatmap')
plt.show()

"""**Step 4 -> Statistical Modeling - Regression Analysis**

To quantify the relationship between Air Pollution, Temperature Anomalies, and GDP, i shall use Linear Regression.

4.1 : Install Required Libraries
"""

import statsmodels.api as sm
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

"""4.2 : Prepare Data for Regression"""

# Select relevant columns
df_regression = final_merged_df[['Air_Pollution_Index', 'Temp_Anomaly', 'GDP']].dropna()

# Define independent variables (X) and dependent variable (y)
X = df_regression[['Air_Pollution_Index', 'Temp_Anomaly']]  # Predictors
y = df_regression['GDP']  # Target variable

# Add a constant (intercept) to X for statsmodels
X = sm.add_constant(X)

# Split data into Training (80%) and Testing (20%) sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""4.3 : Train Linear Regression Model"""

# Train the model using OLS (Ordinary Least Squares)
model = sm.OLS(y_train, X_train).fit()

# Print the regression results summary
print(model.summary())

"""4.4 : Predict and Evaluate the Model"""

# Train the model using sklearn
regressor = LinearRegression()
regressor.fit(X_train, y_train)

# Predict GDP using the test set
y_pred = regressor.predict(X_test)

# Model evaluation
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'R-squared Score: {r2}')

"""4.5 : Visualizing Regression Results"""

plt.figure(figsize=(8,6))
sns.scatterplot(x=y_test, y=y_pred)
plt.xlabel('Actual GDP')
plt.ylabel('Predicted GDP')
plt.title('Actual vs Predicted GDP')
plt.show()

"""-> Plot: Residuals Distribution"""

residuals = y_test - y_pred
plt.figure(figsize=(8,6))
sns.histplot(residuals, kde=True, bins=30)
plt.xlabel('Residuals')
plt.title('Residuals Distribution')
plt.show()

"""-> Interpret Model Results :
*   Check p-values in model.summary() to determine statistical significance.
*   Check R² score for model performance.

-> Consider More Features :
*   Additional economic indicators, population, CO2 emissions, etc.

-> Perform More Advanced Analysis :
*   Polynomial regression, Time-Series Analysis, etc.






"""